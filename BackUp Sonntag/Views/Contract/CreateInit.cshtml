@model WebApplication1.Models.ViewModels.ContractCreateInitViewModel

@{
    ViewBag.Title = "Pflichtfelder";
}


@Html.Partial("_MultiCreatePartial")

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="flexWrapper">
            <div class="innerWrapper flexSize2">
                <p class="bold">Pflichtfelder zum Anlegen eines Vertrags.</p>
                <div class="col-md-10">
                    <span>Mit den Informationen dieser Seite wird ein </span><span class="bold">vorläufiger </span><span>Vertrag angelegt, auf den weiteren Seiten können Sie diesen vervollständigen.</span>
                </div>
                @Html.HiddenFor(model => model.ContractId)

                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-9" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.SignerName, htmlAttributes: new { @class = "control-label col-md-9" })
                    <div class="col-md-9">
                        @Html.TextBoxFor(m => m.SignerName, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                    </div>
                </div>

                <div class="form-group col-md-6">
                    <div id="ownerControl" style="display:none">
                        @Html.LabelFor(model => model.OwnerId, htmlAttributes: new { @class = "control-label col-md-10" })
                        @*Box pops up, if checkbox is checked*@
                        <div class="col-md-10">
                            @Html.DropDownListFor(m => m.ClientIdOfDepartment, Model.ClientList, htmlAttributes: new { @class = "form-control" })
                            @Html.DropDownListFor(m => m.DepartmentIdOfOwner, Model.DepartmentList, htmlAttributes: new { @class = "form-control" })
                            @Html.DropDownListFor(model => model.OwnerId, Model.OwnerList, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.OwnerId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-10">

                        @Html.CheckBox("manualOwner", new { autocomplete = "off" })
                        @Html.Label("Sachlich Verantwortlicher ist verschieden", new { @for = "manualOwner" })
                    </div>
                </div>
            </div>
            @Html.Partial("_RightFormPartial", Model.Contract, new ViewDataDictionary { TemplateInfo = new System.Web.Mvc.TemplateInfo { HtmlFieldPrefix = "Contract" } }))
            @*Template Info is necessary, to define Model as Contract*@
        </div>
    </div>
}

<!--Oberhauser-->
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Styles.Render("~/Content/css/JQuery/calendar.css")

    <script type="text/javascript">

        //On ClientChangeCoordinator
        $(function () {
            $("#clientCoordinatorId").change(function () {
                updateCoordinatorFromClient();
                $("#manualCoordinator").attr('disabled', 'disabled');
            });
        });

        function updateCoordinatorFromClient() {
            var deffered = $.Deferred();
            var selectedClientValue = $('#clientCoordinatorId :selected').text();
            $.post('@Url.Action("GetJsonCoordinatorsFromClient", "Contract")', { client: selectedClientValue }, function (data) {
                // handle the server response here
                $("#CoordinatorId").empty();
                data = $.map(data, function (item, a) {
                    return "<option value=" + item.Value + " " + (item.Selected ? "selected" : "") + ">" + item.Text + "</option>";
                });

                $("#CoordinatorId").html(data.join(""));
                deffered.resolve();
            });
            return deffered.promise();
        }

        /******************Owner********************/
        $(function () {
            $("#manualOwner").change(function () {
                if ($(this).is(":checked")) {
                    $("#ownerControl").show();
                } else {
                    $("#ownerControl").hide();
                }
            });
        });

        //On ClientChange → Department & Owner
        $(function () {
            $("#ClientIdOfDepartment").change(function () {
                $("#manualOwner").attr('disabled', 'disabled');
                $.when(updateDepartmentsFromClient()).done(function () {
                    //Checks if ClientSelect is empty
                    updateOwnersFromDepartment();
                });
            });
        });

        //On DepartmentChange → Owner
        $(function () {
            $("#DepartmentIdOfOwner").change(function () {
                updateOwnersFromDepartment();
                $("#manualOwner").attr('disabled', 'disabled');
            });
        });

        //Update Department from Client
        function updateDepartmentsFromClient() {
            var deffered = $.Deferred();
            var selectedClientValue = $('#ClientIdOfDepartment :selected').text();
            $.post('@Url.Action("GetJsonDepartmentsFromClient", "Contract")', { client: selectedClientValue }, function (data) {
                // handle the server response here
                $("#DepartmentIdOfOwner").empty();
                data = $.map(data, function (item, a) {
                    return "<option value=" + item.Value + " " + (item.Selected ? "selected" : "") + ">" + item.Text + "</option>";
                });

                $("#DepartmentIdOfOwner").html(data.join(""));
                deffered.resolve();
            });
            return deffered.promise();
        }

        //Update Owner from Department
        function updateOwnersFromDepartment() {
            var deffered = $.Deferred();
            var selectedDepartmentValue = $('#DepartmentIdOfOwner :selected').text();
            $.post('@Url.Action("GetJsonUsersFromDepartment", "Contract")', { department: selectedDepartmentValue }, function (data) {
                // handle the server response here
                $("#OwnerId").empty();
                data = $.map(data, function (item, a) {
                    return "<option value=" + item.Value + " " + (item.Selected ? "selected" : "") + ">" + item.Text + "</option>";
                });

                $("#OwnerId").html(data.join(""));
                deffered.resolve();
            });
            return deffered.promise();
        }


    </script>

}

